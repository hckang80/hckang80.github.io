{"meta":{"title":"HTML, CSS, Javascript, ETC","subtitle":null,"description":null,"author":"Kang Heechang","url":"https://hckang80.github.io"},"pages":[{"title":"About","date":"2018-09-30T11:50:54.000Z","updated":"2018-10-11T23:58:18.589Z","comments":true,"path":"about/index.html","permalink":"https://hckang80.github.io/about/index.html","excerpt":"","text":"Growth StepWEB Publisher -&gt; UI Developer -&gt; Front-end Developer Technical Skills HTML(5), CSS(3), ES6, Vue.js, Angular"},{"title":"Categories","date":"2018-09-30T11:36:38.000Z","updated":"2018-09-30T11:46:39.183Z","comments":true,"path":"categories/index.html","permalink":"https://hckang80.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-09-30T11:38:22.000Z","updated":"2018-09-30T11:46:44.663Z","comments":true,"path":"tags/index.html","permalink":"https://hckang80.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SameSite Cookie 이슈","slug":"SameSite-Cookie-이슈","date":"2020-03-29T11:50:18.000Z","updated":"2020-03-29T12:55:21.664Z","comments":true,"path":"2020/03/29/SameSite-Cookie-이슈/","link":"","permalink":"https://hckang80.github.io/2020/03/29/SameSite-Cookie-%EC%9D%B4%EC%8A%88/","excerpt":"20년 2월 중 릴리즈된 구글의 Chrome 80버전부터는 Cookie의 SameSite 속성 기본 값이 None에서 Rax로 변경됨에 따라 크로스 도메인 내에서만 Cookie를 전송하고 사용할 수 있습니다.조금 바꿔서 얘기하면 Open API 등 타 도메인을 통한 통신에서 쿠키를 이용한 처리가 되지 않을 수 있다는 것입니다. Javascript에서는 아래와 같이 SameSite 속성을 설정하면 기존과 동일한 서비스로 제공이 가능합니다. 다만 여기서 주의할 점은 Secure 속성도 반드시 추가하여야 합니다. 그렇지 않을 경우 브라우저 콘솔 창에서 경고 메시지를 보게 될 것입니다. 1document.cookie = 'cookieName=foo; SameSite=None; Secure' 마지막으로 EditThisCookie와 같은 크롬 확장 도구에서 쿠키의 값을 임의로 변경해 볼 수 있습니다. Reference","text":"20년 2월 중 릴리즈된 구글의 Chrome 80버전부터는 Cookie의 SameSite 속성 기본 값이 None에서 Rax로 변경됨에 따라 크로스 도메인 내에서만 Cookie를 전송하고 사용할 수 있습니다.조금 바꿔서 얘기하면 Open API 등 타 도메인을 통한 통신에서 쿠키를 이용한 처리가 되지 않을 수 있다는 것입니다. Javascript에서는 아래와 같이 SameSite 속성을 설정하면 기존과 동일한 서비스로 제공이 가능합니다. 다만 여기서 주의할 점은 Secure 속성도 반드시 추가하여야 합니다. 그렇지 않을 경우 브라우저 콘솔 창에서 경고 메시지를 보게 될 것입니다. 1document.cookie = 'cookieName=foo; SameSite=None; Secure' 마지막으로 EditThisCookie와 같은 크롬 확장 도구에서 쿠키의 값을 임의로 변경해 볼 수 있습니다. Reference https://www.chromium.org/updates/same-site","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"SameSite, session, cookie","slug":"SameSite-session-cookie","permalink":"https://hckang80.github.io/tags/SameSite-session-cookie/"}]},{"title":"부동 소수점 연산","slug":"부동-소수점-연산","date":"2018-11-04T06:37:04.000Z","updated":"2019-04-12T07:07:53.194Z","comments":true,"path":"2018/11/04/부동-소수점-연산/","link":"","permalink":"https://hckang80.github.io/2018/11/04/%EB%B6%80%EB%8F%99-%EC%86%8C%EC%88%98%EC%A0%90-%EC%97%B0%EC%82%B0/","excerpt":"개발을 하다 보면 수를 이용한 연산이 필요한 경우가 종종 있는데, 소수를 이용한 연산에서 항상 정확한 값을 출력하지는 않는다.이는 부동 소수점 연산에 의해 발생한 것이며 다음과 같은 경우에서 확인이 가능하다. 12var x = 0.2 + 0.1; // 0.30000000000000004var y = 0.1 * 0.1; // 0.010000000000000002 아래와 같이 소수 간에 직접 연산이 일어나지 않도록 하여 올바른 값을 얻을 수는 있지만,연산이 많아질수록 매우 복잡해질것이므로 별로 바람직해 보이지는 않는다. 12var x = (0.2 * 10 + 0.1 * 10) / 10 // 0.3var y = 0.1 * 1 / 10 // 0.01 이를 해결하기 위해 많은 훌륭한 개발자들이 오픈소스를 제공하고 있으며 이를 이용하면 간결하게 처리가 가능하다.https://github.com/MikeMcl/bignumber.js/","text":"개발을 하다 보면 수를 이용한 연산이 필요한 경우가 종종 있는데, 소수를 이용한 연산에서 항상 정확한 값을 출력하지는 않는다.이는 부동 소수점 연산에 의해 발생한 것이며 다음과 같은 경우에서 확인이 가능하다. 12var x = 0.2 + 0.1; // 0.30000000000000004var y = 0.1 * 0.1; // 0.010000000000000002 아래와 같이 소수 간에 직접 연산이 일어나지 않도록 하여 올바른 값을 얻을 수는 있지만,연산이 많아질수록 매우 복잡해질것이므로 별로 바람직해 보이지는 않는다. 12var x = (0.2 * 10 + 0.1 * 10) / 10 // 0.3var y = 0.1 * 1 / 10 // 0.01 이를 해결하기 위해 많은 훌륭한 개발자들이 오픈소스를 제공하고 있으며 이를 이용하면 간결하게 처리가 가능하다.https://github.com/MikeMcl/bignumber.js/ 12345var x = new BigNumber(0.2)x = x.plus(0.1) // 0.3var y = new BigNumber(0.1)y = y.multipliedBy(0.1) // 0.01","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"floating point arithmetic","slug":"floating-point-arithmetic","permalink":"https://hckang80.github.io/tags/floating-point-arithmetic/"}]},{"title":"Big O와 알고리즘","slug":"Big-O와-알고리즘","date":"2018-10-31T14:26:50.000Z","updated":"2018-11-28T02:26:58.724Z","comments":true,"path":"2018/10/31/Big-O와-알고리즘/","link":"","permalink":"https://hckang80.github.io/2018/10/31/Big-O%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","excerpt":"정의Big O란 알고리즘을 처리하는 시간복잡도를 표기한 수입니다. 종류O(1)이 수에서는 알고리즘을 처리하는 시간복잡도가 항상 일정합니다.종류나 길이에 관계없이 이미 알려진 배열 위치에서 요소를 반환하는 알고리즘에서 이 현상이 나타납니다.123const getLast = array =&gt; array[array.length - 1]getLast(['a', 'b', 'c', 'd']) // d (1회 반복)","text":"정의Big O란 알고리즘을 처리하는 시간복잡도를 표기한 수입니다. 종류O(1)이 수에서는 알고리즘을 처리하는 시간복잡도가 항상 일정합니다.종류나 길이에 관계없이 이미 알려진 배열 위치에서 요소를 반환하는 알고리즘에서 이 현상이 나타납니다.123const getLast = array =&gt; array[array.length - 1]getLast(['a', 'b', 'c', 'd']) // d (1회 반복) O(n)이 수에서는 최악의 경우 시간복잡도가 항목 수와 동일하게 증가합니다.즉, N개의 원소가 있다면 최대 N번의 반복이 필요하며 반복문 형태를 취합니다.123456789const findIndex = (array, match) =&gt; &#123; for (let i = 0; i &lt; array.length; i++) &#123; if (array[i] === match) return i &#125; return ''&#125;findIndex(['a', 'b', 'c', 'd'], 'a'); // 0 (1회 반복 - 최소 반복)findIndex(['a', 'b', 'c', 'd'], 'd'); // 3 (4회 반복 - 최대 반복) O(n²)이 수에서는 최악의 경우 시간복잡도는 입력한 수의 제곱입니다.입력한 수와 비례하여 시간이 기하급수적으로 늘어나며 이중 반복문 형태를 취합니다.123456789101112const generatorSquareMatrix = array =&gt; &#123; let matrix = [] for (let i = 0; i &lt; array.length; i++) &#123; matrix[i] = [] for (let j = 0; j &lt; array.length; j++) &#123; matrix[i].push(array[j]) &#125; &#125; return matrix&#125;generatorSquareMatrix(['a', 'b', 'c']); // 3개의 원소일 때 9회 반복 O(log n)이 수는 검색 알고리즘의 가장 적합한 사례로써 대규모 데이터를 처리할 때 가장 효율적인 방법입니다.구성 요소를 하나씩 살펴보는 대신 데이터를 일반적으로 두 분류로 나누고, 매 반복 작업에서 한 분류를 삭제합니다. 이 알고리즘이 가장 널리 사용되는 알고리즘은 특정 요소를 찾거나 목록을 매우 효율적으로 정렬하는 데 사용할 수 있는 Quicksort 알고리즘입니다.12345678910111213141516171819const quickSort = array =&gt; &#123; if (array.length &lt; 2) return array let pivot = array[0] let left = [] let right = [] for (let i = 1; i &lt; array.length; i++) &#123; let list = array[i] if (list &lt; pivot) left.push(list) else right.push(list) &#125; return [ ...quickSort(left), pivot, ...quickSort(right) ]&#125;;quickSort( ['o','b','j','e','c','t','a','s','s','i','g','n'])// [\"a\",\"b\",\"c\", \"e\",\"g\",\"i\",\"j\",\"n\",\"o\",\"s\",\"s\",\"t\"] O(2ⁿ)이 수는 피보나치의 수열이라고 부르며, 직전 수와 현재 수를 합하여 다음 수를 결정하게 됩니다.아래는 피보나치 수열의 예시입니다.0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …123456789101112const fibonacci = num =&gt; &#123; let a = 0, b = 1, temp; while (num &gt; 1) &#123; temp = b b += a a = temp num-- &#125; return a&#125;fibonacci(12) // 89","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"algorithm, Big O","slug":"algorithm-Big-O","permalink":"https://hckang80.github.io/tags/algorithm-Big-O/"}]},{"title":"axios로 파일 다운로드 구현하기","slug":"axios로-파일-다운로드-구현하기","date":"2018-10-14T13:50:18.000Z","updated":"2018-12-04T09:11:15.504Z","comments":true,"path":"2018/10/14/axios로-파일-다운로드-구현하기/","link":"","permalink":"https://hckang80.github.io/2018/10/14/axios%EB%A1%9C-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/","excerpt":"공개적인 파일의 경우 다운로드를 a 요소로 구현하나, 보안상의 목적 등을 위해 Rest API를 이용하여 다음과 같은 방식으로도 구현이 가능하다. 12&lt;!-- 일반적인 형태 --&gt;&lt;a href=\"fileName.xls\"&gt; 12345678910111213141516171819202122// Rest APIconst downloadFile = (params, headers) =&gt; &#123; axios.post(`$&#123;baseUrl&#125;download`, params, &#123; headers, responseType: 'blob' &#125;) .then(response =&gt; &#123; // Blob 생성자 함수로 URL 생성하여 할당 const url = window.URL.createObjectURL(new Blob([response.data])) // &lt;a&gt; 요소 동적 생성 const link = document.createElement('a') // &lt;a&gt; 요소에 href attribute에 url 할당 link.href = url // &lt;a&gt; 요소에 download attribute 와 value 동적 할당 link.setAttribute('download', 'fileName.xls') // body 요소의 직계 자식으로 삽입 후 클릭 document.body.appendChild(link) link.click() &#125;) .catch(e =&gt; &#123; console.error(e) &#125;)&#125;downloadFile('Insert request body argument', 'Insert request header argument')","text":"공개적인 파일의 경우 다운로드를 a 요소로 구현하나, 보안상의 목적 등을 위해 Rest API를 이용하여 다음과 같은 방식으로도 구현이 가능하다. 12&lt;!-- 일반적인 형태 --&gt;&lt;a href=\"fileName.xls\"&gt; 12345678910111213141516171819202122// Rest APIconst downloadFile = (params, headers) =&gt; &#123; axios.post(`$&#123;baseUrl&#125;download`, params, &#123; headers, responseType: 'blob' &#125;) .then(response =&gt; &#123; // Blob 생성자 함수로 URL 생성하여 할당 const url = window.URL.createObjectURL(new Blob([response.data])) // &lt;a&gt; 요소 동적 생성 const link = document.createElement('a') // &lt;a&gt; 요소에 href attribute에 url 할당 link.href = url // &lt;a&gt; 요소에 download attribute 와 value 동적 할당 link.setAttribute('download', 'fileName.xls') // body 요소의 직계 자식으로 삽입 후 클릭 document.body.appendChild(link) link.click() &#125;) .catch(e =&gt; &#123; console.error(e) &#125;)&#125;downloadFile('Insert request body argument', 'Insert request header argument')","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"axios, file download","slug":"axios-file-download","permalink":"https://hckang80.github.io/tags/axios-file-download/"}]},{"title":"lokalise를 이용한 다국어 적용 방법","slug":"lokalise를-이용한-다국어-적용기","date":"2018-09-25T08:01:18.000Z","updated":"2018-11-28T01:28:16.321Z","comments":true,"path":"2018/09/25/lokalise를-이용한-다국어-적용기/","link":"","permalink":"https://hckang80.github.io/2018/09/25/lokalise%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8B%A4%EA%B5%AD%EC%96%B4-%EC%A0%81%EC%9A%A9%EA%B8%B0/","excerpt":"웹서비스를 만들다 보면 최소 국영문 또는 그 이상의 언어를 지원해야 하는 경우가 종종 있다. 업데이트가 빈번한 경우 그때마다 번역본을 전달받아서 개발자가 적용하는건 여간 귀찮은 작업일뿐더러 비효율적이다.https://lokalise.co/ 에서는 이러한 번거로움을 줄이고자, 번역 작업만 전담할 수 있게 툴을 제공한다. DOCS -&gt; CLI TOOL 에서 OS에 맞는 tgz 형식의 파일을 다운 받아서 압축 해제 압축을 해제하면 lokalise.exe 파일이 보일 것이고 다음 폴더에 위치 (Mac: /usr/local/bin, Window: /usr/bin) 작업 폴더의 루트에 lokalise 폴더 및 쉘스크립트 파일 생성 12# /lokalise/script.shlokalise --token &lt;TOKEN&gt; export &lt;PROJECTID&gt; --type json --export_all 1 --unzip_to lokalise --export_empty skip package.json에 쉘스크립트 실행 명령어를 추가 123\"scripts\": &#123; \"lokalise\": \"sh ./lokalise/script.sh\"&#125;, 명령어를 실행하면 프로젝트에 등록된 언어가 폴더 내에 자동으로 업데이트 된다","text":"웹서비스를 만들다 보면 최소 국영문 또는 그 이상의 언어를 지원해야 하는 경우가 종종 있다. 업데이트가 빈번한 경우 그때마다 번역본을 전달받아서 개발자가 적용하는건 여간 귀찮은 작업일뿐더러 비효율적이다.https://lokalise.co/ 에서는 이러한 번거로움을 줄이고자, 번역 작업만 전담할 수 있게 툴을 제공한다. DOCS -&gt; CLI TOOL 에서 OS에 맞는 tgz 형식의 파일을 다운 받아서 압축 해제 압축을 해제하면 lokalise.exe 파일이 보일 것이고 다음 폴더에 위치 (Mac: /usr/local/bin, Window: /usr/bin) 작업 폴더의 루트에 lokalise 폴더 및 쉘스크립트 파일 생성 12# /lokalise/script.shlokalise --token &lt;TOKEN&gt; export &lt;PROJECTID&gt; --type json --export_all 1 --unzip_to lokalise --export_empty skip package.json에 쉘스크립트 실행 명령어를 추가 123\"scripts\": &#123; \"lokalise\": \"sh ./lokalise/script.sh\"&#125;, 명령어를 실행하면 프로젝트에 등록된 언어가 폴더 내에 자동으로 업데이트 된다","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"lokalise, i18n, 다국어","slug":"lokalise-i18n-다국어","permalink":"https://hckang80.github.io/tags/lokalise-i18n-%EB%8B%A4%EA%B5%AD%EC%96%B4/"}]},{"title":"Git Remember","slug":"Git-remember","date":"2018-06-18T10:44:28.000Z","updated":"2018-11-28T01:28:56.629Z","comments":true,"path":"2018/06/18/Git-remember/","link":"","permalink":"https://hckang80.github.io/2018/06/18/Git-remember/","excerpt":"1. 자동완성 설정git 명령어를 입력할 때 Tab키를 눌러서 자동완성을 사용할 수 있다.(window의 경우 따로 설정이 필요하지 않으므로 아래의 과정은 생략한다) 다음의 경로에서 파일을 홈 디렉토리(~)에 다운받는다. (Mac OS) https://github.com/git/git/blob/master/contrib/completion/git-completion.bash ~/.bashrc (혹은 ~/.bash_profile) 파일에 아래의 명령어를 입력한다. 1source ~/git-completion.bash","text":"1. 자동완성 설정git 명령어를 입력할 때 Tab키를 눌러서 자동완성을 사용할 수 있다.(window의 경우 따로 설정이 필요하지 않으므로 아래의 과정은 생략한다) 다음의 경로에서 파일을 홈 디렉토리(~)에 다운받는다. (Mac OS) https://github.com/git/git/blob/master/contrib/completion/git-completion.bash ~/.bashrc (혹은 ~/.bash_profile) 파일에 아래의 명령어를 입력한다. 1source ~/git-completion.bash 2. 주요 명령어단순한 add, commit과 같이 자주 다루는 내용은 생략하였다. 2-1. Config1234# 설정 및 확인$ git config --global user.name hckang80$ git config --global user.email hckang80@gmail.com$ git config --list 2-2. History12345678910111213141516171819202122232425262728# 직전의 add 취소$ git reset HEAD# 직전의 add와 commit 취소$ git reset HEAD^# pull, merge 되돌리기$ git reset --hard ORIG_HEAD# 직전 commit 메세지 변경$ git commit --amend# 기존의 커밋과 병합할 목적으로 commit 하기$ git commit --squash &lt;commit number 7자리~&gt;# vim으로 이동하여 commit 메시지 입력(괄호, 콜론 등 특수문자의 입력이 가능)$ git commit -v# 기존의 commit 이력 관리$ git rebase -i HEAD~10# 이후 메세지를 병합하려면 pick을 squash로 변경 후 저장# 이때 병합하는 메세지의 순서가 나란해야 함# 또는 메세지를 변경하려면 pick을 edit로 변경 후 저장$ git commit --amend# 메세지 변경$ git commit --continue 2-3. Stash123456789# 변경사항을 Stack에 백업하고 워킹디렉토리를 깨끗하게 유지# rebase나 pull이 가능해짐. 직전의 변경사항이 @stash&#123;0&#125;으로 백업$ git stash# 백업한 내용을 가져오고 Stack을 비움$ git stash pop# Stack의 목록 확인$ git stash list 2-4. ETC123# Remote 브런치를 동기화하고 이동$ git fetch origin --prune$ git checkout -t origin/&lt;브런치명&gt;","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"git","slug":"git","permalink":"https://hckang80.github.io/tags/git/"}]},{"title":"자주 사용하는 단축키 정리(Vim, 터미널)","slug":"자주-사용하는-단축키-정리-Vim-터미널","date":"2018-05-26T11:48:26.000Z","updated":"2018-11-28T01:58:00.518Z","comments":true,"path":"2018/05/26/자주-사용하는-단축키-정리-Vim-터미널/","link":"","permalink":"https://hckang80.github.io/2018/05/26/%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%8B%A8%EC%B6%95%ED%82%A4-%EC%A0%95%EB%A6%AC-Vim-%ED%84%B0%EB%AF%B8%EB%84%90/","excerpt":"1. Vimh, j, k, l - 좌, 하, 상, 우 커서 이동 i: 현재 커서 위치에 Insert 하기 w: 단어 첫글자로 이동하기b: 백워드 방향으로 단어의 첫글자로 이동하기 0 - 라인 맨 앞으로 이동^ - 문장 맨 앞으로 이동$ - 문장 맨 뒤로 이동","text":"1. Vimh, j, k, l - 좌, 하, 상, 우 커서 이동 i: 현재 커서 위치에 Insert 하기 w: 단어 첫글자로 이동하기b: 백워드 방향으로 단어의 첫글자로 이동하기 0 - 라인 맨 앞으로 이동^ - 문장 맨 앞으로 이동$ - 문장 맨 뒤로 이동 dd - 현재 줄 잘라내기yy - 현재 줄 복사하기p - 붙혀넣기u - UndoCtrl + R : Redo ~ : 선택 문자 대소문자 변경 :w - 문서 저장하기:q - 현재 문서 닫기:q! - 저장하지 않고 닫기:wq - 저장하고 닫기:숫자 - 지정한 라인넘버로 이동 2. 터미널1234567891011121314151617181920212223242526272829# 해당 경로로 이동$ cd &lt;경로명&gt;# 파일 목록 표시$ ls# 복사$ cp &lt;복사대상&gt; &lt;복사위치&gt;# 이동$ mv &lt;이동대상&gt; &lt;이동위치&gt;# 삭제(폴더의 경우 rf 옵션을 주어 안의 내용까지 삭제)$ rm (-rf) &lt;삭제대상&gt;# 폴더 생성$ mkdir &lt;폴더명&gt;# 폴더 삭제$ rmdir &lt;폴더명&gt;# 파일 생성$ touch &lt;파일명&gt;# 파일 보기$ cat &lt;파일명&gt;# 파일 편집$ vi &lt;파일명&gt;","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"단축키, 터미널, vim","slug":"단축키-터미널-vim","permalink":"https://hckang80.github.io/tags/%EB%8B%A8%EC%B6%95%ED%82%A4-%ED%84%B0%EB%AF%B8%EB%84%90-vim/"}]},{"title":"Angular 시작하기","slug":"Angular-시작하기","date":"2018-03-21T06:10:15.000Z","updated":"2018-03-22T01:30:45.509Z","comments":true,"path":"2018/03/21/Angular-시작하기/","link":"","permalink":"https://hckang80.github.io/2018/03/21/Angular-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/","excerpt":"Angular란?구글에서 만든 오픈 프레임워크로써 angular 시리즈 2번째 버전이다(1번째 버전은 AngularJS이 정식명칭이며, 2번째 버전이 Angular이다). 폴더 구조 셋팅 등 프로젝트 초기에 실행해야 하는 개발환경 셋팅을 모두 도와준다. ###Angular의 특장점 MVC 개발에서 컴포넌트 기반 개발(CBD, Component Based Development)로 전환되었다. one-way 바인딩을 지원하여 성능 이슈가 향상되었다. 주력언어로 TypeScript를 도입하여 대규모 개발에 적합하다. Angular CLI를 통해 개발환경 구축이 간편하다. 설치방법","text":"Angular란?구글에서 만든 오픈 프레임워크로써 angular 시리즈 2번째 버전이다(1번째 버전은 AngularJS이 정식명칭이며, 2번째 버전이 Angular이다). 폴더 구조 셋팅 등 프로젝트 초기에 실행해야 하는 개발환경 셋팅을 모두 도와준다. ###Angular의 특장점 MVC 개발에서 컴포넌트 기반 개발(CBD, Component Based Development)로 전환되었다. one-way 바인딩을 지원하여 성능 이슈가 향상되었다. 주력언어로 TypeScript를 도입하여 대규모 개발에 적합하다. Angular CLI를 통해 개발환경 구축이 간편하다. 설치방법 1$ npm install -g @angular/cli 프로젝트 생성 123$ ng new my-app$ ng new my-app --prefix todos // 생성하면서 접두사 변경 프로젝트 실행 12345$ ng serve$ ng serve --open // 실행과 동시에 브라우저도 오픈$ ng serve --port 4201 // 포트가 충돌날 경우에 포트 변경(4200번을 기본적으로 사용한다) 프로젝트 구성 요소 추가 추가 대상 구성요소 명령어 축약형 컴포넌트 ng generate component component-name ng g c component-name 디렉티브 ng generate directive directive-name ng g d directive-name 파이프 ng generate pipe pipe-name ng g p pipe-name 서비스 ng generate service service-name ng g s service-name 모듈 ng generate module module-name ng g m module-name 가드 ng generate guard guard-name ng g g guard-name 클래스 ng generate class class-name ng g cl class-name 인터페이스 ng generate interface interface-name ng g i interface-name Enum ng generate enum enum-name ng g e enum-name 12345678# 인라인 HTML 템플릿을 사용하는 경우$ ng g c home --inline-template // html 파일이 생성되지 않는다.# 인라인 CSS를 사용하는 경우$ ng g c home --inline-style // css 파일이 생성되지 않는다.# 인라인 HTML 템플릿과 인라인 CSS를 사용하는 경우$ ng g c home --inline-template --inline-style // html, css 파일이 모두 생성되지 않는다. app.component.ts 기본 구조 (루트 컴포넌트) 12345678910111213// 임포트 영역import &#123; Component &#125; from '@angular/core';// @Component 데코레이터 영역@Component(&#123; selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.css']&#125;)// 컴포넌트 클래스 영역export class AppComponent &#123; title = 'app';&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"angular","slug":"angular","permalink":"https://hckang80.github.io/tags/angular/"}]},{"title":"UI 개발에 유용한 사이트 모음","slug":"UI-개발에-유용한-사이트-모음","date":"2018-03-13T01:03:42.000Z","updated":"2018-11-28T01:29:34.718Z","comments":true,"path":"2018/03/13/UI-개발에-유용한-사이트-모음/","link":"","permalink":"https://hckang80.github.io/2018/03/13/UI-%EA%B0%9C%EB%B0%9C%EC%97%90-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%AA%A8%EC%9D%8C/","excerpt":"1. https://caniuse.com/HTML5, CSS3, Javascript 등 여러가지 속성과 값에 대한 브라우저 지원 여부를 알려준다. 브라우저가 지원을 안할 경우 Resources 탭을 한 번 확인하자. Polyfill 을 제공하여 사용할 수 있도록 도와주기도 한다. 2. https://www.miketaylr.com/pres/html5/forms2.htmlHTML5 의 다양한 폼 컨트롤 요소가 정리되어 있다. IE 의 경우 지원안하는 경우가 많으므로 https://caniuse.com/ 에서 확인하고 사용하자.","text":"1. https://caniuse.com/HTML5, CSS3, Javascript 등 여러가지 속성과 값에 대한 브라우저 지원 여부를 알려준다. 브라우저가 지원을 안할 경우 Resources 탭을 한 번 확인하자. Polyfill 을 제공하여 사용할 수 있도록 도와주기도 한다. 2. https://www.miketaylr.com/pres/html5/forms2.htmlHTML5 의 다양한 폼 컨트롤 요소가 정리되어 있다. IE 의 경우 지원안하는 경우가 많으므로 https://caniuse.com/ 에서 확인하고 사용하자. 3. https://googlefonts.github.io/korean/머싱러닝 기반의 한글 웹폰트를 제공한다. 4. http://fontello.com/Font Awesome 등 다양한 웹폰트 아이콘을 제공하여 주며, 필요한 것만 설정하여 다운받을 수 있다. 웹폰트 아이콘은 확대해서 보아도 선명한 장점이 있으므로, 모바일 프로젝트에서 많은 이점이 있다. 설정한 아이콘은 config.json 에 저장되므로 임포트하여 선택한 폰트 목록을 나중에 다시 불러올 수 있다. 5. http://lorempixel.com/더미(Dummy) 이미지를 제공하여 준다. 사이즈와 종류를 선택하여 원하는대로 생성이 가능하다. 6. https://placeholder.com/똑같이 더미(Dummy) 이미지를 제공하여주나, 회색배경에 사이즈를 표기한 형태로 제공한다.","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"tools, sitemap","slug":"tools-sitemap","permalink":"https://hckang80.github.io/tags/tools-sitemap/"}]},{"title":"바람직한 CSS 작성 방법(지극히 주관적)","slug":"바람직한-CSS-작성-방법","date":"2018-01-25T06:05:26.000Z","updated":"2018-01-29T07:01:19.426Z","comments":true,"path":"2018/01/25/바람직한-CSS-작성-방법/","link":"","permalink":"https://hckang80.github.io/2018/01/25/%EB%B0%94%EB%9E%8C%EC%A7%81%ED%95%9C-CSS-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95/","excerpt":"참고 : 글쓴이의 주관적인 생각에 의해 작성된 것이므로 자신이 사용하는 방법과 맞지 않을 수도 있습니다. 글 특성상 경어는 생략하도록 하겠습니다. 요즘은 Sass, Less 등 전처리기의 도움으로 자칫 복잡해 질 수 있는 css 코드도 효과적인 관리가 가능하지만 바람직한 css를 작성하는 기본은 잊지 않아야 한다.그럼 글쓴이의 경험에 의한 바람직한 css 작성 방법에 대해 알아보겠다. 1. 내용이 반복되지 않도록 한다.아래는 국기 아이콘 부분을 IR(Image Replacement) 기법을 이용하여 작성한 코드이다. 123456&lt;ul class=\"lang-list\"&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-kr\"&gt;국문&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-en\"&gt;English&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-ja\"&gt;日本語&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-zh\"&gt;中國&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;","text":"참고 : 글쓴이의 주관적인 생각에 의해 작성된 것이므로 자신이 사용하는 방법과 맞지 않을 수도 있습니다. 글 특성상 경어는 생략하도록 하겠습니다. 요즘은 Sass, Less 등 전처리기의 도움으로 자칫 복잡해 질 수 있는 css 코드도 효과적인 관리가 가능하지만 바람직한 css를 작성하는 기본은 잊지 않아야 한다.그럼 글쓴이의 경험에 의한 바람직한 css 작성 방법에 대해 알아보겠다. 1. 내용이 반복되지 않도록 한다.아래는 국기 아이콘 부분을 IR(Image Replacement) 기법을 이용하여 작성한 코드이다. 123456&lt;ul class=\"lang-list\"&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-kr\"&gt;국문&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-en\"&gt;English&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-ja\"&gt;日本語&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-zh\"&gt;中國&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 1234567891011121314151617181920212223242526272829/* 내용이 중복된 코드 */.ico-kr&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat;&#125;.ico-en&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -20px;&#125;.ico-ja&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -40px;&#125;.ico-zh&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -60px;&#125; 위와 같은 경우, 배경이미지 등 여러 내용이 동일함에도 불구하고 반복되어 사용되고 있다.공통으로 선택하여 반복되는 내용은 한 번에 작성하고 값이 다른 배경이미지 위치만 각기 넣는 형태가 바람직하다. 123456789101112131415161718192021/* 개선된 코드 */.lang-list a&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background-image: url(‘../images/ico-flag.png’); background-repeat: no-repeat;&#125;.ico-kr&#123; background-position: 0 0; /* 배경위치가 기본 값이므로 생략 가능하나 코드의 일관성을 위해 넣어봤다. */&#125;.ico-en&#123; background-position: -20px 0;&#125;.ico-ja&#123; background-position: -40px 0;&#125;.ico-zh&#123; background-position: -60px 0;&#125; 2. 선택자를 너무 간결하거나 복잡하게 사용하지 않는다.1234/* 안좋은 예 */.box&#123; border:1px solid #ddd; &#125;.title&#123; font-size:1.2rem; &#125;.content .wrap .list .desc-area .item&#123; color:#f00; &#125; 선택자가 간결할 경우, 웹 사이트가 확장 됨에 따라 중첩된 선택이 일어나 의도하지 않은 변형이 일어날 확률이 현저히 많아진다. 반대로 너무 길어지게 되면 가독성이 안좋아지고, 코드의 일관성을 맞추기도 어려워진다.각 요소의 첫 번째 선택자를 두 단어 이상 조합된 형태로 작성만 하여도 이러한 문제를 충분히 피할 수 있다. 1234/* 개선된 코드 */.news-wrap .box&#123; border:1px solid #ddd; &#125;.sub-title&#123; font-size:1.2rem; &#125;.desc-area .item&#123; color:#f00; &#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://hckang80.github.io/categories/CSS/"}],"tags":[{"name":"CSS, Desirable, Simple, 바람직한, 간결한","slug":"CSS-Desirable-Simple-바람직한-간결한","permalink":"https://hckang80.github.io/tags/CSS-Desirable-Simple-%EB%B0%94%EB%9E%8C%EC%A7%81%ED%95%9C-%EA%B0%84%EA%B2%B0%ED%95%9C/"}]},{"title":"알고리즘 문제 풀이 - 두 점수를 비교하다","slug":"두 점수를 비교하다","date":"2018-01-22T08:30:27.000Z","updated":"2018-05-01T13:24:17.772Z","comments":true,"path":"2018/01/22/두 점수를 비교하다/","link":"","permalink":"https://hckang80.github.io/2018/01/22/%EB%91%90%20%EC%A0%90%EC%88%98%EB%A5%BC%20%EB%B9%84%EA%B5%90%ED%95%98%EB%8B%A4/","excerpt":"‘a양’과 ‘b군’의 점수를 비교한 후 점수가 높은 쪽에게 승점을 주어 배열로 출력해보자. 1234567891011var a = [5, 7, 15]; // 'a양'의 점수var b = [10, 7, 11]; // 'b군'의 점수var point = [0, 0]; // 'a양'과 'b군'이 획득하게 될 승점을 배열로 선언for(var i in a)&#123; if(a[i] &gt; b[i])&#123; // 'a양'의 점수가 높다면 point[0]++; // 배열로 선언한 'a양'의 승점이 증가 &#125;else if(a[i] &lt; b[i])&#123; // 'b군'의 점수가 높다면 point[1]++; // 배열로 선언한 'b군'의 승점이 증가 &#125;&#125;return point;","text":"‘a양’과 ‘b군’의 점수를 비교한 후 점수가 높은 쪽에게 승점을 주어 배열로 출력해보자. 1234567891011var a = [5, 7, 15]; // 'a양'의 점수var b = [10, 7, 11]; // 'b군'의 점수var point = [0, 0]; // 'a양'과 'b군'이 획득하게 될 승점을 배열로 선언for(var i in a)&#123; if(a[i] &gt; b[i])&#123; // 'a양'의 점수가 높다면 point[0]++; // 배열로 선언한 'a양'의 승점이 증가 &#125;else if(a[i] &lt; b[i])&#123; // 'b군'의 점수가 높다면 point[1]++; // 배열로 선언한 'b군'의 승점이 증가 &#125;&#125;return point;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"array, algorithms, 배열, 알고리즘","slug":"array-algorithms-배열-알고리즘","permalink":"https://hckang80.github.io/tags/array-algorithms-%EB%B0%B0%EC%97%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"}]},{"title":"2018년 Front-end 개발 로드맵","slug":"2018년 Front-end 개발 로드맵","date":"2018-01-15T03:53:19.000Z","updated":"2018-09-30T11:49:11.882Z","comments":true,"path":"2018/01/15/2018년 Front-end 개발 로드맵/","link":"","permalink":"https://hckang80.github.io/2018/01/15/2018%EB%85%84%20Front-end%20%EA%B0%9C%EB%B0%9C%20%EB%A1%9C%EB%93%9C%EB%A7%B5/","excerpt":"","text":"","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"map","slug":"map","permalink":"https://hckang80.github.io/tags/map/"}]},{"title":"Hexo 기본 사용법","slug":"Hexo-기본-사용법","date":"2018-01-14T05:16:50.000Z","updated":"2018-09-30T11:48:19.533Z","comments":true,"path":"2018/01/14/Hexo-기본-사용법/","link":"","permalink":"https://hckang80.github.io/2018/01/14/Hexo-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95/","excerpt":"로컬서버 실행하기12# -o 옵션을 붙이면 브라우저도 오픈$ hexo server -o 새 글 작성하기 (source 폴더에 파일이 생성됨)12# layout: post, page, draft$ hexo new (layout) \"My New Post\" 글 발행하기12$ hexo clean$ hexo d -g","text":"로컬서버 실행하기12# -o 옵션을 붙이면 브라우저도 오픈$ hexo server -o 새 글 작성하기 (source 폴더에 파일이 생성됨)12# layout: post, page, draft$ hexo new (layout) \"My New Post\" 글 발행하기12$ hexo clean$ hexo d -g","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hckang80.github.io/tags/hexo/"}]}]}