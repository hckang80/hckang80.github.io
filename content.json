{"meta":{"title":"HTML, CSS, Javascript, ETC","subtitle":null,"description":null,"author":"Kang Heechang","url":"https://hckang80.github.io"},"pages":[{"title":"About","date":"2018-09-30T11:50:54.000Z","updated":"2018-10-11T22:39:41.511Z","comments":true,"path":"about/index.html","permalink":"https://hckang80.github.io/about/index.html","excerpt":"","text":"Grow StepWEB Publisher -&gt; UI Developer -&gt; Front-end Developer Technical Skills HTML(5), CSS(3), ES6, Vue.js, Angular"},{"title":"Categories","date":"2018-09-30T11:36:38.000Z","updated":"2018-09-30T11:46:39.183Z","comments":true,"path":"categories/index.html","permalink":"https://hckang80.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-09-30T11:38:22.000Z","updated":"2018-09-30T11:46:44.663Z","comments":true,"path":"tags/index.html","permalink":"https://hckang80.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"lokalise를 이용한 다국어 적용 방법","slug":"lokalise를-이용한-다국어-적용기","date":"2018-09-25T08:01:18.000Z","updated":"2018-09-30T11:48:25.487Z","comments":true,"path":"2018/09/25/lokalise를-이용한-다국어-적용기/","link":"","permalink":"https://hckang80.github.io/2018/09/25/lokalise를-이용한-다국어-적용기/","excerpt":"","text":"웹서비스를 만들다 보면 최소 국영문 또는 그 이상의 언어를 지원해야 하는 경우가 종종 있다. 업데이트가 빈번한 경우 그때마다 번역본을 전달받아서 개발자가 적용하는건 여간 귀찮은 작업일뿐더러 비효율적이다.https://lokalise.co/ 에서는 이러한 번거로움을 줄이고자, 번역 작업만 전담할 수 있게 툴을 제공한다. DOCS -&gt; CLI TOOL 에서 OS에 맞는 tgz 형식의 파일을 다운 받아서 압축 해제 압축을 해제하면 lokalise.exe 파일이 보일 것이고 다음 폴더에 위치 (Mac: /usr/local/bin, Window: /usr/bin) 작업 폴더의 루트에 lokalise 폴더 및 쉘스크립트 파일 생성 12# /lokalise/script.shlokalise --token &lt;TOKEN&gt; export &lt;PROJECTID&gt; --type json --export_all 1 --unzip_to lokalise --export_empty skip package.json에 쉘스크립트 실행 명령어를 추가 123\"scripts\": &#123; \"lokalise\": \"sh ./lokalise/script.sh\"&#125;, 명령어를 실행하면 프로젝트에 등록된 언어가 폴더 내 추가 또는 업데이트 된다","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"lokalise, i18n, 다국어","slug":"lokalise-i18n-다국어","permalink":"https://hckang80.github.io/tags/lokalise-i18n-다국어/"}]},{"title":"Git remember","slug":"Git-remember","date":"2018-09-17T22:44:28.000Z","updated":"2018-10-11T23:24:30.597Z","comments":true,"path":"2018/09/18/Git-remember/","link":"","permalink":"https://hckang80.github.io/2018/09/18/Git-remember/","excerpt":"","text":"자동완성 설정하기git 명령어를 입력할 때 키를 눌러서 자동완성을 사용할 수 있다. https://github.com/git/git/blob/master/contrib/completion/git-completion.bash 파일을 홈 디렉토리에 다운받는다 ~/.bashrc (혹은 ~/.bash_profile) 파일에 아래의 명령어를 입력한다(Mac OS). Window의 경우에는 따로 설정이 필요하지 않다. 1source ~/git-completion.bash 자주사용하는 명령어정말로 자주 사용하는 명령어만 추려보았다. (add, commit과 같이 가장 기본적인 내용은 생략하였다) 12345678# 가장 최근의 add 취소하기$git reset HEAD# 가장 최근의 commit 취소하기$git reset HEAD^# 가장 최근의 commit 메세지 변경$git commit --amend","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"git","slug":"git","permalink":"https://hckang80.github.io/tags/git/"}]},{"title":"TypeScript & React & Redux 시작하기","slug":"React-시작하기","date":"2018-05-10T10:34:11.000Z","updated":"2018-06-01T05:10:36.293Z","comments":true,"path":"2018/05/10/React-시작하기/","link":"","permalink":"https://hckang80.github.io/2018/05/10/React-시작하기/","excerpt":"","text":"우선 CRA를 통해 설치합니다.1$ create-react-app typescript-react-tutorial --scripts-version=react-scripts-ts 부트스트랩을 사용하고 싶다면 다음과 같이 설치합니다.(4버전부터는 레이아웃이 flex 기반이므로 3버전으로 설치합니다)1$ npm i bootstrap@3.3.7 /src/index.tsx 에 아래의 한 줄을 추가합니다.import ‘bootstrap/dist/css/bootstrap.css’1234import App from './App';import 'bootstrap/dist/css/bootstrap.css';import './index.css'; Redux 및 관련 패키지를 설치합니다.1$ npm i redux react-redux immutable redux-actions Redux 및 관련 패키지에서도 타입 지원을 받을 수 있도록 타입 패키지를 설치합니다.(immutable 과 redux는 TypeScript 지원이 내장되어 있어서 타입 패키지 설치를 생략합니다)1$ npm i @types/react-redux @types/redux-actions --save-dev","categories":[{"name":"react","slug":"react","permalink":"https://hckang80.github.io/categories/react/"}],"tags":[{"name":"react, redux","slug":"react-redux","permalink":"https://hckang80.github.io/tags/react-redux/"}]},{"title":"알고리즘 문제 풀이 - 야근 지수","slug":"야근 지수","date":"2018-05-03T10:24:54.000Z","updated":"2018-05-03T10:24:54.818Z","comments":true,"path":"2018/05/03/야근 지수/","link":"","permalink":"https://hckang80.github.io/2018/05/03/야근 지수/","excerpt":"","text":"회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다. 문제풀이의 포인트가장 큰 숫자를 남은 시간만큼 반복하여 줄여주는 것이다. 123456789101112function noOvertime(no, works) &#123; let result = 0; while ( result &lt; no ) &#123; works.sort(( a, b ) =&gt; b - a )[0] -= 1; // 일의 결과(배열)를 정렬하여 가장 큰 숫자를 1씩 감소시킨다. result++; &#125; result = 0; works.forEach( num =&gt; result += Math.pow(num, 2)); // 감소된 일의 결과를 제곱하여 더하면 끝 return result;&#125;noOvertime(4, [4, 3, 3])","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"algorithms, 알고리즘","slug":"algorithms-알고리즘","permalink":"https://hckang80.github.io/tags/algorithms-알고리즘/"}]},{"title":"알고리즘 문제 풀이 - 시저암호","slug":"시저암호","date":"2018-05-01T13:23:15.000Z","updated":"2018-05-03T10:23:59.147Z","comments":true,"path":"2018/05/01/시저암호/","link":"","permalink":"https://hckang80.github.io/2018/05/01/시저암호/","excerpt":"","text":"어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.A를 3만큼 밀면 D가 되고 z를 1만큼 밀면 a가 됩니다. 공백은 수정하지 않습니다.보낼 문자열 s와 얼마나 밀지 알려주는 n을 입력받아 암호문을 만드는 caesar 함수를 완성해 보세요.“a B z”,4를 입력받았다면 “e F d”를 리턴합니다. 문제풀이의 포인트인자로 전달받은 알파벳의 인덱스를 증가하여 추출하되 인덱스가 알파벳의 총 갯수보다 많아지는 경우에는 감소시켜 추출하여야 한다 123456789101112131415161718192021function caesar(s, n) &#123; let result = ''; let lowerCase = 'abcdefghijklmnopqrstuvwxyz' let upperCase = lowerCase.toUpperCase(); result = s.split('').map( str =&gt; &#123; let lowerUpper = lowerCase; let number = lowerUpper.indexOf(str) + n; // 추출할 알파벳의 인덱스 if ( number === -1 + n ) &#123; // 소문자가 아닌 경우 lowerUpper = upperCase; number = lowerUpper.indexOf(str) + n; // 대문자에서 알파벳의 인덱스를 추출 &#125; if ( Math.floor( number / lowerCase.length ) ) &#123; // 알파벳의 인덱스가 0 ~ 25 사이가 아니라면 추출할 인덱스를 다시 계산한다 number = number - lowerCase.length * ( Math.floor( number / lowerCase.length ) ) &#125; return str === ' ' ? ' ' : lowerUpper[number]; // 공백의 경우에는 그대로 반환한다. &#125;).join(''); return result;&#125;console.log('s는 \"a B z\", n은 4인 경우: ' + caesar(\"a B z\", 4));","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"algorithms, 알고리즘","slug":"algorithms-알고리즘","permalink":"https://hckang80.github.io/tags/algorithms-알고리즘/"}]},{"title":"Angular 시작하기","slug":"Angular-시작하기","date":"2018-03-21T06:10:15.000Z","updated":"2018-03-22T01:30:45.509Z","comments":true,"path":"2018/03/21/Angular-시작하기/","link":"","permalink":"https://hckang80.github.io/2018/03/21/Angular-시작하기/","excerpt":"","text":"Angular란?구글에서 만든 오픈 프레임워크로써 angular 시리즈 2번째 버전이다(1번째 버전은 AngularJS이 정식명칭이며, 2번째 버전이 Angular이다). 폴더 구조 셋팅 등 프로젝트 초기에 실행해야 하는 개발환경 셋팅을 모두 도와준다. ###Angular의 특장점 MVC 개발에서 컴포넌트 기반 개발(CBD, Component Based Development)로 전환되었다. one-way 바인딩을 지원하여 성능 이슈가 향상되었다. 주력언어로 TypeScript를 도입하여 대규모 개발에 적합하다. Angular CLI를 통해 개발환경 구축이 간편하다. 설치방법 1$ npm install -g @angular/cli 프로젝트 생성 123$ ng new my-app$ ng new my-app --prefix todos // 생성하면서 접두사 변경 프로젝트 실행 12345$ ng serve$ ng serve --open // 실행과 동시에 브라우저도 오픈$ ng serve --port 4201 // 포트가 충돌날 경우에 포트 변경(4200번을 기본적으로 사용한다) 프로젝트 구성 요소 추가 추가 대상 구성요소 명령어 축약형 컴포넌트 ng generate component component-name ng g c component-name 디렉티브 ng generate directive directive-name ng g d directive-name 파이프 ng generate pipe pipe-name ng g p pipe-name 서비스 ng generate service service-name ng g s service-name 모듈 ng generate module module-name ng g m module-name 가드 ng generate guard guard-name ng g g guard-name 클래스 ng generate class class-name ng g cl class-name 인터페이스 ng generate interface interface-name ng g i interface-name Enum ng generate enum enum-name ng g e enum-name 12345678# 인라인 HTML 템플릿을 사용하는 경우$ ng g c home --inline-template // html 파일이 생성되지 않는다.# 인라인 CSS를 사용하는 경우$ ng g c home --inline-style // css 파일이 생성되지 않는다.# 인라인 HTML 템플릿과 인라인 CSS를 사용하는 경우$ ng g c home --inline-template --inline-style // html, css 파일이 모두 생성되지 않는다. app.component.ts 기본 구조 (루트 컴포넌트) 12345678910111213// 임포트 영역import &#123; Component &#125; from '@angular/core';// @Component 데코레이터 영역@Component(&#123; selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.css']&#125;)// 컴포넌트 클래스 영역export class AppComponent &#123; title = 'app';&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"angular","slug":"angular","permalink":"https://hckang80.github.io/tags/angular/"}]},{"title":"프론트엔드 개발에 유용한 사이트 모음","slug":"프론트엔드-개발에-유용한-사이트-모음","date":"2018-03-13T01:03:42.000Z","updated":"2018-09-30T11:49:37.075Z","comments":true,"path":"2018/03/13/프론트엔드-개발에-유용한-사이트-모음/","link":"","permalink":"https://hckang80.github.io/2018/03/13/프론트엔드-개발에-유용한-사이트-모음/","excerpt":"","text":"1. https://caniuse.com/HTML5, CSS3, Javascript 등 여러가지 속성과 값에 대한 브라우저 지원 여부를 알려준다. 브라우저가 지원을 안할 경우 Resources 탭을 한 번 확인하자. Polyfill 을 제공하여 사용할 수 있도록 도와주기도 한다. 2. https://www.miketaylr.com/pres/html5/forms2.htmlHTML5 의 다양한 폼 컨트롤 요소가 정리되어 있다. IE 의 경우 지원안하는 경우가 많으므로 https://caniuse.com/ 에서 확인하고 사용하자. 3. https://googlefonts.github.io/korean/머싱러닝 기반의 한글 웹폰트를 제공한다. 4. http://fontello.com/Font Awesome 등 다양한 웹폰트 아이콘을 제공하여 주며, 필요한 것만 설정하여 다운받을 수 있다. 웹폰트 아이콘은 확대해서 보아도 선명한 장점이 있으므로, 모바일 프로젝트에서 많은 이점이 있다. 설정한 아이콘은 config.json 에 저장되므로 임포트하여 선택한 폰트 목록을 나중에 다시 불러올 수 있다. 5. http://lorempixel.com/더미(Dummy) 이미지를 제공하여 준다. 사이즈와 종류를 선택하여 원하는대로 생성이 가능하다. 6. https://placeholder.com/똑같이 더미(Dummy) 이미지를 제공하여주나, 회색배경에 사이즈를 표기한 형태로 제공한다.","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"tools, sitemap","slug":"tools-sitemap","permalink":"https://hckang80.github.io/tags/tools-sitemap/"}]},{"title":"TypeScript 시작하기","slug":"TypeScript-시작하기","date":"2018-03-08T04:52:37.000Z","updated":"2018-03-21T06:20:05.606Z","comments":true,"path":"2018/03/08/TypeScript-시작하기/","link":"","permalink":"https://hckang80.github.io/2018/03/08/TypeScript-시작하기/","excerpt":"","text":"Typescript(이하 ts)의 특징 및 장점 React 등 사용영역이 점차 확대되고 있다. 타입을 지원하므로 다양한 도구의 지원를 받기가 좋아 생산성이 향상된다. Java 나 C# 등의 클래스 기반 언어를 먼저 알고 접근하면 더 좋다. 컴파일러 기능을 내장하고 있으므로, Babel이 필요 없게 된다. 코드 가독성, 예측성, 안정성이 향상되어 대규모 프로젝트에 적합하다. 설치 및 버전 확인 1234$ npm install -g typescript // typescript는 전역으로 설치하자$ tsc -v // 설치가 잘 되었는지 확인하자Version 2.7.2 컴파일 방법 12345$ tsc person // person.ts의 확장자 생략이 가능하다. 기본적으로 es3문법으로 컴파일한다$ tsc person -t es5 // -t는 target이며 문법을 지정하여 컴파일한다$ tsc *.ts // 한번에 여러파일을 컴파일한다","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"https://hckang80.github.io/tags/typescript/"}]},{"title":"Sass 시작하기","slug":"Sass-시작하기","date":"2018-02-08T01:54:42.000Z","updated":"2018-03-06T01:21:08.729Z","comments":true,"path":"2018/02/08/Sass-시작하기/","link":"","permalink":"https://hckang80.github.io/2018/02/08/Sass-시작하기/","excerpt":"","text":"Sass의 경우 Ruby 와 Node 기반 형태로 나누어지며 문법이 조금 다르다. (node 기반이 css 작성 방법과 조금 더 유사하며 최신 트렌드이므로 node 기반으로 설명하겠다) 우선 node.js의 설치가 필요하다.https://nodejs.org/ko/ 설치하고자 하는 폴더로 이동 후 bash에서 아래와 같이 입력하여 진행한다. 12345678910111213// 폴더 내에 package.json이 없는 경우에는 아래 명령어부터 입력하여 설정하는 것이 좋다.$ npm init -y// npm을 통한 node-sass의 설치$ npm install node-sass// src 하위의 sass 폴더 전체를 dist 하위의 css 폴더로 컴파일한다.// 이때 watch 모드이므로 변경사항을 실시간 감지한다.$ node-sass --watch src/sass --output dist/css// 실제 프로젝트를 진행할때는 용량이 적을수록 좋기 때문에 빈공간이 없는 압축된 형태로 컴파일한다.// --output-style : nested(default), expanded(표준 스타일), compact(룰셋을 한줄로 표기), compressed(빈공간이 없는 형태)$ node-sass --output-style compressed src/sass --output dist/css 관련 사이트https://velopert.com/1712https://sass-guidelin.es/ko/https://sass.urbanzakapa.kr/https://www.sassmeister.com/","categories":[{"name":"CSS","slug":"CSS","permalink":"https://hckang80.github.io/categories/CSS/"}],"tags":[{"name":"Sass","slug":"Sass","permalink":"https://hckang80.github.io/tags/Sass/"}]},{"title":"바람직한 CSS 작성 방법(지극히 주관적)","slug":"바람직한-CSS-작성-방법","date":"2018-01-25T06:05:26.000Z","updated":"2018-01-29T07:01:19.426Z","comments":true,"path":"2018/01/25/바람직한-CSS-작성-방법/","link":"","permalink":"https://hckang80.github.io/2018/01/25/바람직한-CSS-작성-방법/","excerpt":"","text":"참고 : 글쓴이의 주관적인 생각에 의해 작성된 것이므로 자신이 사용하는 방법과 맞지 않을 수도 있습니다. 글 특성상 경어는 생략하도록 하겠습니다. 요즘은 Sass, Less 등 전처리기의 도움으로 자칫 복잡해 질 수 있는 css 코드도 효과적인 관리가 가능하지만 바람직한 css를 작성하는 기본은 잊지 않아야 한다.그럼 글쓴이의 경험에 의한 바람직한 css 작성 방법에 대해 알아보겠다. 1. 내용이 반복되지 않도록 한다.아래는 국기 아이콘 부분을 IR(Image Replacement) 기법을 이용하여 작성한 코드이다. 123456&lt;ul class=\"lang-list\"&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-kr\"&gt;국문&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-en\"&gt;English&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-ja\"&gt;日本語&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\" class=\"ico-zh\"&gt;中國&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 1234567891011121314151617181920212223242526272829/* 내용이 중복된 코드 */.ico-kr&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat;&#125;.ico-en&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -20px;&#125;.ico-ja&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -40px;&#125;.ico-zh&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background: url(‘../images/ico-flag.png’) no-repeat 0 -60px;&#125; 위와 같은 경우, 배경이미지 등 여러 내용이 동일함에도 불구하고 반복되어 사용되고 있다.공통으로 선택하여 반복되는 내용은 한 번에 작성하고 값이 다른 배경이미지 위치만 각기 넣는 형태가 바람직하다. 123456789101112131415161718192021/* 개선된 코드 */.lang-list a&#123; display: inline-block; width: 30px; height: 20px; text-indent: -9999px; background-image: url(‘../images/ico-flag.png’); background-repeat: no-repeat;&#125;.ico-kr&#123; background-position: 0 0; /* 배경위치가 기본 값이므로 생략 가능하나 코드의 일관성을 위해 넣어봤다. */&#125;.ico-en&#123; background-position: -20px 0;&#125;.ico-ja&#123; background-position: -40px 0;&#125;.ico-zh&#123; background-position: -60px 0;&#125; 2. 선택자를 너무 간결하거나 복잡하게 사용하지 않는다.1234/* 안좋은 예 */.box&#123; border:1px solid #ddd; &#125;.title&#123; font-size:1.2rem; &#125;.content .wrap .list .desc-area .item&#123; color:#f00; &#125; 선택자가 간결할 경우, 웹 사이트가 확장 됨에 따라 중첩된 선택이 일어나 의도하지 않은 변형이 일어날 확률이 현저히 많아진다. 반대로 너무 길어지게 되면 가독성이 안좋아지고, 코드의 일관성을 맞추기도 어려워진다.각 요소의 첫 번째 선택자를 두 단어 이상 조합된 형태로 작성만 하여도 이러한 문제를 충분히 피할 수 있다. 1234/* 개선된 코드 */.news-wrap .box&#123; border:1px solid #ddd; &#125;.sub-title&#123; font-size:1.2rem; &#125;.desc-area .item&#123; color:#f00; &#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://hckang80.github.io/categories/CSS/"}],"tags":[{"name":"CSS, Desirable, Simple, 바람직한, 간결한","slug":"CSS-Desirable-Simple-바람직한-간결한","permalink":"https://hckang80.github.io/tags/CSS-Desirable-Simple-바람직한-간결한/"}]},{"title":"알고리즘 문제 풀이 - 두 점수를 비교하다","slug":"두 점수를 비교하다","date":"2018-01-22T08:30:27.000Z","updated":"2018-05-01T13:24:17.772Z","comments":true,"path":"2018/01/22/두 점수를 비교하다/","link":"","permalink":"https://hckang80.github.io/2018/01/22/두 점수를 비교하다/","excerpt":"","text":"‘a양’과 ‘b군’의 점수를 비교한 후 점수가 높은 쪽에게 승점을 주어 배열로 출력해보자. 1234567891011var a = [5, 7, 15]; // 'a양'의 점수var b = [10, 7, 11]; // 'b군'의 점수var point = [0, 0]; // 'a양'과 'b군'이 획득하게 될 승점을 배열로 선언for(var i in a)&#123; if(a[i] &gt; b[i])&#123; // 'a양'의 점수가 높다면 point[0]++; // 배열로 선언한 'a양'의 승점이 증가 &#125;else if(a[i] &lt; b[i])&#123; // 'b군'의 점수가 높다면 point[1]++; // 배열로 선언한 'b군'의 승점이 증가 &#125;&#125;return point;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"array, algorithms, 배열, 알고리즘","slug":"array-algorithms-배열-알고리즘","permalink":"https://hckang80.github.io/tags/array-algorithms-배열-알고리즘/"}]},{"title":"알고리즘 문제 풀이 - 배열의 합을 구해보자","slug":"배열의-합을-구해보자","date":"2018-01-18T00:50:22.000Z","updated":"2018-01-31T02:21:43.396Z","comments":true,"path":"2018/01/18/배열의-합을-구해보자/","link":"","permalink":"https://hckang80.github.io/2018/01/18/배열의-합을-구해보자/","excerpt":"","text":"123456var ar = [1, 2, 3, 4, 10, 11];var sum = 0;for(var i in ar)&#123; sub += ar[i]; // i는 배열의 인덱스를 순차적으로 출력하므로 sum은 배열의 값을 더해나감&#125;return sum;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://hckang80.github.io/categories/javascript/"}],"tags":[{"name":"array, algorithms, 배열, 알고리즘","slug":"array-algorithms-배열-알고리즘","permalink":"https://hckang80.github.io/tags/array-algorithms-배열-알고리즘/"}]},{"title":"2018년 Front-end 개발 로드맵","slug":"2018년 Front-end 개발 로드맵","date":"2018-01-15T03:53:19.000Z","updated":"2018-09-30T11:49:11.882Z","comments":true,"path":"2018/01/15/2018년 Front-end 개발 로드맵/","link":"","permalink":"https://hckang80.github.io/2018/01/15/2018년 Front-end 개발 로드맵/","excerpt":"","text":"","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"map","slug":"map","permalink":"https://hckang80.github.io/tags/map/"}]},{"title":"Hexo 기본 사용법","slug":"Hexo-기본-사용법","date":"2018-01-14T05:16:50.000Z","updated":"2018-09-30T11:48:19.533Z","comments":true,"path":"2018/01/14/Hexo-기본-사용법/","link":"","permalink":"https://hckang80.github.io/2018/01/14/Hexo-기본-사용법/","excerpt":"","text":"로컬서버 실행하기12# -o 옵션을 붙이면 브라우저도 오픈$ hexo server -o 새 글 작성하기 (source 폴더에 파일이 생성됨)12# layout: post, page, draft$ hexo new (layout) \"My New Post\" 글 발행하기12$ hexo clean$ hexo d -g","categories":[{"name":"etc","slug":"etc","permalink":"https://hckang80.github.io/categories/etc/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hckang80.github.io/tags/hexo/"}]}]}